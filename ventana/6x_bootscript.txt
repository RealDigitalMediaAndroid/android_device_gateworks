echo "Gateworks Ventana Android Boot script v1.03"
echo "RDM BootScript Modifications v5"

# RDM Changes
# v5 - load /boot/video_mode if it exists, otherwise let
#      the kernel pick the best mode from the monitor's modelist
# v4 - turn on gsc watchdog
# v3 - fixed part environment variable shadowing ours
# v2 - use android boot images to make life easier
# v1 - add android recovery test and partition 2 support
#    - add default HDMI 1920x1080 if no video detected

# enable watchdog
gsc wd enable 60

# set some defaults
test -n "$fs"    || fs=ext2
test -n "$disk"  || disk=0
test -n "$part"  || setenv part 1
setenv bootargs console=${console},${baudrate} ubi.mtd=2
setenv loadaddr 10800000
setenv fdt_addr 18000000
# setenv rd_addr  16000000
setenv boot_img boot.img

# check for a video mode to use
# file should look like this (trailing newline is optional):
# hdmi=1920x1080
${fs}load ${dtype} ${disk}:${part} ${loadaddr} video_mode && env import -t ${loadaddr} ${filesize}

# boot from partition 2 for Android recovery
if itest.s "x${android_recovery}" == "x1"; then
  setenv part 2
  setenv boot_img recovery.img
fi

# memory configuration
if test -n "$mem" ; then
  echo "using mem from env: $mem"
else
  if itest.s "x${mem_mb}" == "x512" ; then
    echo "Detected 512MB DRAM - adjusting GPU memory allocation"
    setenv mem "galcore.contiguousSize=0x6000000 cma=256M"
  else
    setenv mem "cma=384M"
  fi
fi
setenv bootargs "${bootargs}" "${mem}"

# setenv display to override detection for a single display
# or setenv video if you want multiple displays
if test -n "$video" ; then
  echo "using video config from env: $video"
  setenv bootargs "${bootargs}" "${video}"
else
  if test -n "$hdmi" ; then
	echo "  mxcfb0: HDMI ($hdmi)"
	setenv bootargs "${bootargs}" video=mxcfb0:dev=hdmi,bpp=32,${hdmi},if=RGB24
  fi
fi

# set minimum GPU frequency scaling
setenv bootargs "${bootargs}" "galcore.initgpu3DMinClock=3"

# detect dtype and bootdev by looking for kernel on media the bootloader
# has mounted (in order of preference: usb/mmc/sata)
#
# This assumes the bootloader has already started the respective subsystem
# or mounted the filesystem if appropriate to get to this bootscript
#
# To Speed up boot set dtype manually
if test -n "$dtype" ; then
	echo "Using dtype from env: $dtype"
else
	echo "Detecting boot device (dtype)..."
	if ${fs}load usb ${disk}:${part} ${loadaddr} ${boot_img} ; then
		dtype=usb
	elif ${fs}load mmc ${disk}:${part} ${loadaddr} ${boot_img} ; then
		dtype=mmc
	elif ${fs}load sata ${disk}:${part} ${loadaddr} ${boot_img} ; then
		dtype=sata
	elif ubifsload ${loadaddr} ${boot_img} ; then
		dtype=nand
	fi
	echo "detected dtype:$dtype"
fi
if test -n "$bootdev" ; then
	echo "Using bootdev from env: $bootdev"
else
	if itest.s "x${dtype}" == "xmmc" ; then
		bootdev=mmcblk0
	else
		bootdev=sda
	fi
fi

setenv bootargs "${bootargs}" androidboot.hardware=freescale androidboot.console=${console} androidboot.product.model=${model} androidboot.serialno=${serial#} androidboot.ethaddr=${gw_ethaddr}

if itest.s "x${dtype}" == "xnand" ; then
	echo "Booting from NAND..."
	setenv bootargs "${bootargs}" androidboot.mode=nand
	# disable selinux until we get policy config figured out
	setenv bootargs "${bootargs}" selinux=0
	setenv fsload ubifsload
else
	echo "Booting from block device ${bootdev}..."
	setenv bootargs "${bootargs}" androidboot.mode=block androidboot.bootdev=${bootdev}
	setenv fsload "${fs}load ${dtype} ${disk}:${part}"
fi

setenv bootargs "${bootargs}" "${extra}"
echo "Trying ${fsload} ${loadaddr} ${boot_img}"
echo "Args   ${bootargs}"
if ${fsload} ${loadaddr} ${boot_img}; then
	if ${fsload} ${fdt_addr} boot/${fdt_file}; then
		echo Loaded DTB from boot/${fdt_file}
		bootm ${loadaddr} ${loadaddr} ${fdt_addr}
	elif ${fsload} ${fdt_addr} boot/${fdt_file1}; then
		echo Loaded DTB from boot/${fdt_file1}
		bootm ${loadaddr} ${loadaddr} ${fdt_addr}
	elif ${fsload} ${fdt_addr} boot/${fdt_file2}; then
		echo Loaded DTB from boot/${fdt_file2}
		bootm ${loadaddr} ${loadaddr} ${fdt_addr}
	else
		echo "Error loading device-tree"
	fi
else
	echo "Error loading kernel image"
fi
